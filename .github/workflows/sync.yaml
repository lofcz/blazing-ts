name: TypeScript Version Check and Update

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  
jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Get current TypeScript version
        id: current-version
        run: |
            if [ -f "./tools/typescript/package.json" ]; then
              CURRENT_VERSION=$(cat ./tools/typescript/package.json | grep -o '"version": "[^"]*"' | cut -d'"' -f4)
              echo "Current TypeScript version: $CURRENT_VERSION"
              echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "No existing TypeScript installation found"
              echo "current_version=0.0.0" >> $GITHUB_OUTPUT
            fi
          
      - name: Get latest TypeScript version from npm
        id: latest-version
        run: |
          LATEST_VERSION=$(npm view typescript dist-tags.latest)
          LATEST_DEV_VERSION=$(npm view typescript dist-tags.next)
          if [[ "$LATEST_DEV_VERSION" > "$LATEST_VERSION" ]]; then
            LATEST_VERSION=$LATEST_DEV_VERSION
          fi
          echo "Latest TypeScript version: $LATEST_VERSION"
          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
      - name: Compare versions and update if needed
        if: steps.latest-version.outputs.latest_version != steps.current-version.outputs.current_version
        run: |
          rm -rf ./tools/typescript/*
          npm install --prefix ./tools typescript@${{ steps.latest-version.outputs.latest_version }}
          mv ./tools/node_modules/typescript/* ./tools/typescript/
          rm -rf ./tools/node_modules
          
      - name: Build NuGet package
        if: steps.latest-version.outputs.latest_version != steps.current-version.outputs.current_version
        run: |
          dotnet restore
          dotnet build --configuration Release /p:TargetFramework=netstandard2.0
          dotnet pack --configuration Release /p:TargetFramework=netstandard2.0 --no-build
          
      - name: Create GitHub Release
        if: steps.latest-version.outputs.latest_version != steps.current-version.outputs.current_version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.latest-version.outputs.latest_version }}
          release_name: Release v${{ steps.latest-version.outputs.latest_version }}
          body: |
            Updated TypeScript from v${{ steps.current-version.outputs.current_version }} to v${{ steps.latest-version.outputs.latest_version }}
            
            Target Framework: .NET Standard 2.0
          draft: false
          prerelease: false
          
      - name: Push to NuGet
        if: steps.latest-version.outputs.latest_version != steps.current-version.outputs.current_version
        run: |
          dotnet nuget push ./bin/Release/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
          
      - name: Commit changes
        if: steps.latest-version.outputs.latest_version != steps.current-version.outputs.current_version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./tools/typescript
          git commit -m "Update TypeScript to v${{ steps.latest-version.outputs.latest_version }}"
          git push

