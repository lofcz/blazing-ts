name: TypeScript Version Check and Update

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force new release even if versions match'
        required: false
        type: boolean
        default: false
  
jobs:
  check-and-update:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Get current TypeScript version
        id: current-version
        run: |
          if [ -f "./BlazingTs/BlazingTs/tools/typescript/package.json" ]; then
            CURRENT_VERSION=$(cat ./BlazingTs/BlazingTs/tools/typescript/package.json | grep -o '"version": "[^"]*"' | cut -d'"' -f4)
            echo "Current TypeScript version: $CURRENT_VERSION"
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No existing TypeScript installation found"
            echo "current_version=0.0.0" >> $GITHUB_OUTPUT
          fi
          
      - name: Get latest TypeScript version from npm
        id: latest-version
        run: |
            # get latest tag
            LATEST_VERSION=$(npm view typescript dist-tags.latest)
            
            # ignore dev versions
            if [[ $LATEST_VERSION == *"dev"* ]]; then
              echo "Latest version $LATEST_VERSION contains 'dev', skipping update"
              echo "latest_version=${{ steps.current-version.outputs.current_version }}" >> $GITHUB_OUTPUT
            else
              echo "Latest TypeScript version: $LATEST_VERSION"
              echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            fi

      - name: Determine if update is needed
        id: update-needed
        run: |
            CURRENT_BASE_VERSION=$(echo "${{ steps.current-version.outputs.current_version }}" | sed 's/-hotfix\.[0-9]*$//')
            LATEST_VERSION="${{ steps.latest-version.outputs.latest_version }}"
            
            if [ "$CURRENT_BASE_VERSION" != "$LATEST_VERSION" ]; then
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
            elif [ "${{ inputs.force_release }}" == "true" ]; then
            # Split version into parts
            IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_BASE_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            # Increment patch version for force release
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH-hotfix.1"
            
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            else
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "new_version=${{ steps.current-version.outputs.current_version }}" >> $GITHUB_OUTPUT
            fi
          
      - name: Install dos2unix
        if: steps.update-needed.outputs.update_needed == 'true'
        run: sudo apt-get install -y dos2unix
    
      - name: Compare versions and update if needed
        if: steps.update-needed.outputs.update_needed == 'true'
        run: |
            # backup extra files
            mkdir -p ./temp_backup
            cp ./BlazingTs/BlazingTs/tools/typescript/tsc2.cmd ./temp_backup/ || true
            cp ./BlazingTs/BlazingTs/tools/typescript/tsc3.cmd ./temp_backup/ || true
            cp ./BlazingTs/BlazingTs/tools/typescript/tsc2.sh ./temp_backup/ || true
            cp ./BlazingTs/BlazingTs/tools/typescript/tsc3.sh ./temp_backup/ || true
            
            # Install new version
            mkdir -p ./BlazingTs/BlazingTs/tools/typescript
            rm -rf ./BlazingTs/BlazingTs/tools/typescript/*
            npm install --prefix ./temp typescript@${{ steps.latest-version.outputs.latest_version }}
            mv ./temp/node_modules/typescript/* ./BlazingTs/BlazingTs/tools/typescript/
            
            # Restore backup files
            cp ./temp_backup/tsc2.cmd ./BlazingTs/BlazingTs/tools/typescript/ || true
            cp ./temp_backup/tsc3.cmd ./BlazingTs/BlazingTs/tools/typescript/ || true
            cp ./temp_backup/tsc2.sh ./BlazingTs/BlazingTs/tools/typescript/ || true
            cp ./temp_backup/tsc3.sh ./BlazingTs/BlazingTs/tools/typescript/ || true
            
            # Ensure shell scripts have correct permissions
            chmod +x ./BlazingTs/BlazingTs/tools/typescript/tsc2.sh || true
            chmod +x ./BlazingTs/BlazingTs/tools/typescript/tsc3.sh || true
            
            # Ensure shell scripts have Unix line endings
            dos2unix ./BlazingTs/BlazingTs/tools/typescript/tsc2.sh || true
            dos2unix ./BlazingTs/BlazingTs/tools/typescript/tsc3.sh || true
            
            # Cleanup
            rm -rf ./temp
            rm -rf ./temp_backup

      - name: Check if tag exists
        id: check_tag
        if: steps.update-needed.outputs.update_needed == 'true'
        run: |
          if git rev-parse "v${{ steps.update-needed.outputs.new_version }}" >/dev/null 2>&1; then
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Increment hotfix version if tag exists
        id: increment_hotfix
        if: steps.check_tag.outputs.tag_exists == 'true'
        run: |
          VERSION="${{ steps.update-needed.outputs.new_version }}"
          if [[ $VERSION == *"-hotfix."* ]]; then
            BASE_VERSION=$(echo $VERSION | sed 's/-hotfix\.[0-9]*$//')
            HOTFIX_NUM=$(echo $VERSION | grep -o 'hotfix\.[0-9]*$' | grep -o '[0-9]*$')
            NEW_HOTFIX=$((HOTFIX_NUM + 1))
            NEW_VERSION="${BASE_VERSION}-hotfix.${NEW_HOTFIX}"
          else
            NEW_VERSION="${VERSION}-hotfix.1"
          fi
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Final version will be: $NEW_VERSION"
          
      - name: Update project version
        if: steps.update-needed.outputs.update_needed == 'true'
        run: |
          FINAL_VERSION="${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}"
          sed -i "s/<Version>.*<\/Version>/<Version>${FINAL_VERSION}<\/Version>/" ./BlazingTs/BlazingTs/BlazingTs.csproj

      - name: Build NuGet package
        if: steps.update-needed.outputs.update_needed == 'true'
        working-directory: ./BlazingTs/BlazingTs
        run: |
          dotnet restore
          dotnet build --configuration Release /p:TargetFramework=netstandard2.0
          dotnet pack --configuration Release /p:TargetFramework=netstandard2.0 --no-build
          
      - name: Create GitHub Release
        if: steps.update-needed.outputs.update_needed == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}
          release_name: Release v${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}
          body: |
            Updated TypeScript from v${{ steps.current-version.outputs.current_version }} to v${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}
            
            Target Framework: .NET Standard 2.0
          draft: false
          prerelease: false
          
      - name: Push to NuGet
        if: steps.update-needed.outputs.update_needed == 'true'
        working-directory: ./BlazingTs/BlazingTs
        run: |
          FINAL_VERSION="${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}"
          echo "Contents of ./bin/Release directory:"
          ls -la ./bin/Release/
          echo "Pushing new package version $FINAL_VERSION"
          dotnet nuget push ./bin/Release/BlazingTs.${FINAL_VERSION}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
  
      - name: Commit changes
        if: steps.update-needed.outputs.update_needed == 'true'
        run: |
          FINAL_VERSION="${{ steps.increment_hotfix.outputs.new_version || steps.update-needed.outputs.new_version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add ./BlazingTs/BlazingTs/tools/typescript
          git add ./BlazingTs/BlazingTs/BlazingTs.csproj
          git commit -m "Update TypeScript to v${FINAL_VERSION}"
          git push